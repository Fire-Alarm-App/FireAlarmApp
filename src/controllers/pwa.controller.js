// Express router setup
const express = require('express');
const router = express.Router();

// Other imports
const path = require('path');
const bcrypt = require('bcrypt');
const saltRounds = 10;
const root_dir = require('app-root-path');
const db = require(`${root_dir}/src/models`);
const env = process.env.NODE_ENV || 'development'
const config = require(`${root_dir}/src/config/config.json`)[env];

// Web-push setup
const push = require('web-push');
const pushDetails = config.push_details;
push.setVapidDetails(`mailto:${pushDetails.email}`, pushDetails.publicKey, pushDetails.privateKey);

// Applying routes

router.post("/subscribe", subscribe);
router.post('/alarm', configureAlarm);
router.post("/register", registerUser);

// Express Routes

/**
 * @openapi
 *
 * /subscribe:
 *   post:
 *     summary: Subscribes user to push notifications - PWA
 *     description: Subscribes user specified in request to receive notifications from the web server
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               sub:
 *                 type: object
 *                 description: The subscription object generated by the web API push manager
 *                 properties:
 *                   endpoint:
 *                     type: string
 *                     description: The generated web endpoint
 *                   expirationTime:
 *                     type: string
 *                     description: The expiration time for the subscription (DOMHighResTimeStamp or null)
 *                     example: null
 *                   keys:
 *                     type: object
 *                     properties:
 *                       p256dh:
 *                         type: string
 *                         description: The Elliptic curve Diffie-Hellman public key
 *                       auth:
 *                         type: string
 *                         description: The authentication secret described in webpush-encryption-08 standard
 *               user:
 *                 type: string
 *                 description: The username of the user who is subscribing
 *                 example: bcsotty
 *     responses:
 *       200:
 *         description: User successfully subscribed
 *         content:
 *           text/html:
 *             example: Subscription linked to bcsotty successfully
 *       404:
 *         description: User not found in database
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   description: Error displayed when user not in DB
 *                   example: User not found
 *       409:
 *         description: Endpoint already exists
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   description: The error displayed when duplicate endpoint is submitted
 *                   example: Duplicate endpoint error
 *       500:
 *         description: Unknown internal server error
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   description: The error displayed when an unknown failure occurred
 *                   example: An unexpected error has occurred
 * */
async function subscribe (req, res) {
    const body = req.body;
    const subscription = body.sub;
    const username = body.user;

    const user = await db.user.findOne({ where: {username: username } });
    try {
        if (user) {
            const sub = await user.createSubscription({
                endpoint: subscription.endpoint,
                expirationTime: subscription.expirationTime,
                p256dh: subscription.keys.p256dh,
                auth: subscription.keys.auth
            });
            console.log(`Subscription linked to ${username} successfully`);
            return res.status(200).send(`Subscription linked to ${username} successfully`);
        }
        else {
            return res.status(404).json({"error": "User not found"});
        }
    }
    catch (err) {
        if (err.name === 'SequelizeUniqueConstraintError') {
            return res.status(409).json({"error": "Duplicate endpoint error"})
        } else {
            console.log("An unexpected error has occurred: ", err);
            return res.status(500).json({"error": "An unexpected error has occurred"});
        }
    }
}


/**
 * @openapi
 *
 * /alarm:
 *   post:
 *     summary: Configures new/existing alarms - PWA
 *     description: Sets up and configures new/existing alarms. Currently, hardcoded with no request body for alpha.
 *     responses:
 *       200:
 *         description: The alarm was successfully linked
 *         content:
 *           text/plain:
 *             schema:
 *               type: string
 *               description: Success message
 *               example: Alarm successfully linked
 *       404:
 *         description: Unable to find alarm or user
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   description: The error that occurred
 *                   example: Unable to find alarm
 *       500:
 *         description: Unexpected error occurred
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   description: Error message
 *                   example: Unexpected error occurred
 *
 */
async function configureAlarm (req, res) {
    // This will be used in the future for setting up and configuring existing alarms. Currently just hardcoded for alpha
    const alarm = await db.alarm.findOne({ where: { alarmSerial: '1' } });
    try {
        if (alarm) {
            db.user.findOne({ where: {username: 'bcsotty'} }).then(user => {
                if (user) {
                    user.setAlarm(alarm)
                        .then( () => {
                            console.log('Alarm 1 successfully linked to bcsotty');
                            return res.status(200).send('Alarm successfully linked');
                        })
                        .catch(err => {
                            console.error('Error linking alarm to bcsotty: ', err);
                            return res.status(500).send('Error linking alarm');
                        });
                } else {
                    res.status(404).json({ 'error': 'Unable to find user' });
                }
            });
        } else {
            return res.status(404).json({ 'error': 'Unable to find alarm' });
        }
    } catch (err) {
        console.log('Unknown error occurred: ', err);
        return res.status(500).json({ 'error': 'Unexpected error occurred' });
    }
}


/**
 * @openapi
 *
 * /register:
 *   post:
 *     summary: Creates a new User account - PWA
 *     description: Creates a new user account in the database if the username isn't taken.
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               username:
 *                 type: string
 *                 description: The username for the user
 *                 example: bcsotty
 *               password:
 *                 type: string
 *                 description: The password for the user. Will be encrypted before saved to DB.
 *                 example: 123
 *               firstName:
 *                 type: string
 *                 description: The users first name
 *                 example: Brett
 *               lastName:
 *                 type: string
 *                 description: The users last name
 *                 example: Csotty
 *     responses:
 *       200:
 *         description: The user was successfully registered
 *         content:
 *           text/plain:
 *             schema:
 *               type: string
 *               description: Success message
 *               example: User successfully registered
 *       422:
 *         description: Invalid/missing parameters
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   description: Error message
 *                   example: Password doesn't meet validation criteria
 *       500:
 *         description: Unexpected error occurred
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   description: Error message
 *                   example: Unexpected error occurred
 */
async function registerUser (req, res) {
    const body = req.body;
    const username = body.username;
    const user = await db.user.findOne( { where: {username: username} } );
    try {
        if (!user) {
            let password = body.password;
            console.log(saltRounds, typeof(saltRounds));
            bcrypt.hash(password, saltRounds, function(err, hash) {
                if (err) {
                    throw err;
                }
                const new_user = db.user.create({
                    firstName: body.firstName,
                    lastName: body.lastName,
                    username: body.username,
                    password: hash
                });

                console.log("Successfully created user ", username);
                return res.status(200).send("User created successfully!");
            });
        } else {
            return res.status(422).json({"error": "User already exists"});
        }
    }
    catch (err) {
        console.log("An unexpected error has occurred ", err);
        return res.status(500).json({"error": "An unexpected error occurred"});
    }
}


module.exports = router;